-- Oracle DDL for Census Database Management System
-- Target: Oracle 19c+ (works on 12c with IDENTITY). All names created in current schema (user).
-- Conventions:
--   * BOOLEAN → CHAR(1) CHECK (IN ('Y','N'))
--   * TEXT → VARCHAR2(n) (use CLOB for long text)
--   * TIMESTAMPTZ → TIMESTAMP WITH TIME ZONE
--   * SERIAL / BIGSERIAL → NUMBER GENERATED AS IDENTITY
--   * Remove PostgreSQL-specific clauses (IF NOT EXISTS, search_path, now())
--   * Cross-table validations moved from CHECKs to triggers (see bottom section)

--------------------------------------------------------------------------------
-- 0) GENERIC LOOKUPS
--------------------------------------------------------------------------------
CREATE TABLE code_list (
  code_list_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name         VARCHAR2(128) NOT NULL UNIQUE
);

CREATE TABLE code_item (
  code_item_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  code_list_id NUMBER NOT NULL,
  code         VARCHAR2(64) NOT NULL,
  label        VARCHAR2(512) NOT NULL,
  sort_order   NUMBER,
  CONSTRAINT fk_code_item_list FOREIGN KEY (code_list_id)
    REFERENCES code_list(code_list_id) ON DELETE CASCADE,
  CONSTRAINT uq_code_item UNIQUE (code_list_id, code)
);

--------------------------------------------------------------------------------
-- 1) GEOGRAPHY HIERARCHY
--------------------------------------------------------------------------------
CREATE TABLE region (
  region_code VARCHAR2(16) PRIMARY KEY,
  region_name VARCHAR2(128) NOT NULL
);

CREATE TABLE district (
  district_code VARCHAR2(16) PRIMARY KEY,
  region_code   VARCHAR2(16) NOT NULL,
  district_name VARCHAR2(128) NOT NULL,
  district_type VARCHAR2(32), -- consider mapping to code_list
  CONSTRAINT fk_district_region FOREIGN KEY (region_code)
    REFERENCES region(region_code)
);

CREATE TABLE subdistrict (
  subdistrict_code VARCHAR2(16) PRIMARY KEY,
  district_code    VARCHAR2(16) NOT NULL,
  subdistrict_name VARCHAR2(128) NOT NULL,
  CONSTRAINT fk_subdistrict_district FOREIGN KEY (district_code)
    REFERENCES district(district_code)
);

CREATE TABLE locality (
  locality_code  VARCHAR2(16) PRIMARY KEY,
  subdistrict_code VARCHAR2(16) NOT NULL,
  locality_name  VARCHAR2(128) NOT NULL,
  CONSTRAINT fk_locality_subdistrict FOREIGN KEY (subdistrict_code)
    REFERENCES subdistrict(subdistrict_code)
);

CREATE TABLE enumeration_area (
  ea_code        VARCHAR2(24) PRIMARY KEY,
  ea_number      VARCHAR2(24),
  region_code    VARCHAR2(16) NOT NULL,
  district_code  VARCHAR2(16) NOT NULL,
  subdistrict_code VARCHAR2(16),
  locality_code  VARCHAR2(16) NOT NULL,
  district_type  VARCHAR2(32),      -- attribute only; do not FK to non-unique column
  ea_type        VARCHAR2(32) NOT NULL,
  CONSTRAINT fk_ea_region      FOREIGN KEY (region_code)    REFERENCES region(region_code),
  CONSTRAINT fk_ea_district    FOREIGN KEY (district_code)  REFERENCES district(district_code),
  CONSTRAINT fk_ea_subdistrict FOREIGN KEY (subdistrict_code) REFERENCES subdistrict(subdistrict_code),
  CONSTRAINT fk_ea_locality    FOREIGN KEY (locality_code)  REFERENCES locality(locality_code)
);

--------------------------------------------------------------------------------
-- 2) STRUCTURE / HOUSEHOLD / VISITS
--------------------------------------------------------------------------------
CREATE TABLE structure (
  ea_code          VARCHAR2(24) NOT NULL,
  structure_no     VARCHAR2(24) NOT NULL,
  structure_address VARCHAR2(500),
  CONSTRAINT pk_structure PRIMARY KEY (ea_code, structure_no),
  CONSTRAINT fk_structure_ea FOREIGN KEY (ea_code) REFERENCES enumeration_area(ea_code)
);

CREATE TABLE household (
  ea_code            VARCHAR2(24) NOT NULL,
  structure_no       VARCHAR2(24) NOT NULL,
  household_no       VARCHAR2(24) NOT NULL,
  locality_code      VARCHAR2(16),
  type_of_residence  VARCHAR2(24) NOT NULL, -- e.g., OCCUPIED/VACANT
  address_detail     VARCHAR2(500),
  utility_customer_no VARCHAR2(64),
  phone1             VARCHAR2(32),
  phone2             VARCHAR2(32),
  created_at         TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  CONSTRAINT pk_household PRIMARY KEY (ea_code, structure_no, household_no),
  CONSTRAINT fk_household_structure FOREIGN KEY (ea_code, structure_no)
    REFERENCES structure(ea_code, structure_no),
  CONSTRAINT fk_household_locality FOREIGN KEY (locality_code)
    REFERENCES locality(locality_code)
);

CREATE TABLE household_visit (
  quest_id        VARCHAR2(64),
  ea_code         VARCHAR2(24) NOT NULL,
  structure_no    VARCHAR2(24) NOT NULL,
  household_no    VARCHAR2(24) NOT NULL,
  visit_no        NUMBER NOT NULL,
  interview_date  DATE NOT NULL,
  interviewer_name VARCHAR2(128),
  result_code     VARCHAR2(32),
  notes           CLOB,
  CONSTRAINT pk_household_visit PRIMARY KEY (ea_code, structure_no, household_no, visit_no),
  CONSTRAINT ck_visit_no CHECK (visit_no >= 1),
  CONSTRAINT fk_visit_household FOREIGN KEY (ea_code, structure_no, household_no)
    REFERENCES household(ea_code, structure_no, household_no)
);

--------------------------------------------------------------------------------
-- 3) HOUSING CHARACTERISTICS (Section H)
--------------------------------------------------------------------------------
CREATE TABLE household_housing (
  ea_code              VARCHAR2(24) NOT NULL,
  structure_no         VARCHAR2(24) NOT NULL,
  household_no         VARCHAR2(24) NOT NULL,
  dwelling_type        VARCHAR2(32),  -- H01
  wall_material        VARCHAR2(32),  -- H02
  floor_material       VARCHAR2(32),  -- H03
  roof_material        VARCHAR2(32),  -- H04
  tenure_type          VARCHAR2(32),  -- H05
  ownership_type       VARCHAR2(32),  -- H06
  rooms_total          NUMBER,        -- H07a
  rooms_sleeping       NUMBER,        -- H07b
  rooms_shared         CHAR(1) CHECK (rooms_shared IN ('Y','N')),
  rooms_shared_with    NUMBER,
  lighting_type        VARCHAR2(32),  -- H08
  water_source_main    VARCHAR2(32),  -- H09a
  water_source_alt     VARCHAR2(32),  -- H09b
  cooking_fuel         VARCHAR2(32),  -- H10
  kitchen_type         VARCHAR2(32),  -- H11
  bathing_type         VARCHAR2(32),  -- H12
  toilet_type          VARCHAR2(32),  -- H13a
  toilet_shared        CHAR(1) CHECK (toilet_shared IN ('Y','N')),
  toilet_shared_with   NUMBER,
  refuse_disposal      VARCHAR2(32),  -- H14
  liquid_waste_disposal VARCHAR2(32), -- H15
  recorded_at          TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  CONSTRAINT pk_household_housing PRIMARY KEY (ea_code, structure_no, household_no),
  CONSTRAINT fk_housing_household FOREIGN KEY (ea_code, structure_no, household_no)
    REFERENCES household(ea_code, structure_no, household_no),
  CONSTRAINT ck_room_counts CHECK (
    (rooms_total IS NULL OR rooms_total >= 0) AND
    (rooms_sleeping IS NULL OR rooms_sleeping >= 0) AND
    (rooms_shared_with IS NULL OR rooms_shared_with >= 0) AND
    (toilet_shared_with IS NULL OR toilet_shared_with >= 0)
  )
);

--------------------------------------------------------------------------------
-- 4) ROSTER (A16a), ABSENT (A16b), EMIGRATION (E)
--------------------------------------------------------------------------------
CREATE TABLE household_roster (
  ea_code                 VARCHAR2(24) NOT NULL,
  structure_no            VARCHAR2(24) NOT NULL,
  household_no            VARCHAR2(24) NOT NULL,
  line_no                 NUMBER NOT NULL,
  full_name               VARCHAR2(200) NOT NULL,
  sex                     VARCHAR2(8) NOT NULL,
  relationship_to_head_code VARCHAR2(16) NOT NULL,
  presence_status         CHAR(1) NOT NULL CHECK (presence_status IN ('A','B')),
  CONSTRAINT pk_household_roster PRIMARY KEY (ea_code, structure_no, household_no, line_no),
  CONSTRAINT fk_roster_household FOREIGN KEY (ea_code, structure_no, household_no)
    REFERENCES household(ea_code, structure_no, household_no)
);

CREATE TABLE household_absent (
  ea_code                     VARCHAR2(24) NOT NULL,
  structure_no                VARCHAR2(24) NOT NULL,
  household_no                VARCHAR2(24) NOT NULL,
  line_no                     NUMBER NOT NULL,
  full_name                   VARCHAR2(200) NOT NULL,
  relationship_to_head_code   VARCHAR2(16) NOT NULL,
  sex                         VARCHAR2(8) NOT NULL,
  age_years                   NUMBER CHECK (age_years BETWEEN 0 AND 99),
  destination_town            VARCHAR2(200),
  destination_region_or_country_code VARCHAR2(16),
  months_absent               NUMBER CHECK (months_absent BETWEEN 0 AND 6),
  CONSTRAINT pk_household_absent PRIMARY KEY (ea_code, structure_no, household_no, line_no),
  CONSTRAINT fk_absent_household FOREIGN KEY (ea_code, structure_no, household_no)
    REFERENCES household(ea_code, structure_no, household_no)
);

CREATE TABLE household_emigration (
  ea_code                VARCHAR2(24) NOT NULL,
  structure_no           VARCHAR2(24) NOT NULL,
  household_no           VARCHAR2(24) NOT NULL,
  e_line                 NUMBER NOT NULL,
  full_name              VARCHAR2(200) NOT NULL,
  age                    NUMBER CHECK (age BETWEEN 15 AND 99),
  year_of_departure      NUMBER, -- validated by trigger to be <= EXTRACT(YEAR FROM SYSDATE)
  relationship_to_head_code VARCHAR2(16),
  activity_abroad_code   VARCHAR2(16),
  activity_abroad_text   VARCHAR2(200),
  destination_country_code VARCHAR2(16),
  CONSTRAINT pk_household_emigration PRIMARY KEY (ea_code, structure_no, household_no, e_line),
  CONSTRAINT fk_emigration_household FOREIGN KEY (ea_code, structure_no, household_no)
    REFERENCES household(ea_code, structure_no, household_no)
);

--------------------------------------------------------------------------------
-- 5) PERSON (linked to roster)
--------------------------------------------------------------------------------
CREATE TABLE person (
  person_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ea_code          VARCHAR2(24) NOT NULL,
  structure_no     VARCHAR2(24) NOT NULL,
  household_no     VARCHAR2(24) NOT NULL,
  line_no          NUMBER, -- nullable for non-roster persons (e.g., mortality-only)
  full_name        VARCHAR2(200),
  sex              VARCHAR2(8),
  date_of_birth    DATE,
  age_years        NUMBER CHECK (age_years BETWEEN 0 AND 99),
  nationality      VARCHAR2(32),
  ethnicity        VARCHAR2(32),
  born_in_town_of_census CHAR(1) CHECK (born_in_town_of_census IN ('Y','N')),
  birthplace_region_or_country VARCHAR2(64),
  years_in_town    NUMBER,
  religion         VARCHAR2(32),
  marital_status   VARCHAR2(32),
  literacy_status  VARCHAR2(32),
  education_level  VARCHAR2(32),
  education_grade  VARCHAR2(16),
  CONSTRAINT fk_person_household FOREIGN KEY (ea_code, structure_no, household_no)
    REFERENCES household(ea_code, structure_no, household_no),
  CONSTRAINT fk_person_roster FOREIGN KEY (ea_code, structure_no, household_no, line_no)
    REFERENCES household_roster(ea_code, structure_no, household_no, line_no)
    DEFERRABLE INITIALLY DEFERRED,
  CONSTRAINT ck_birthplace_consistency CHECK (
    (born_in_town_of_census = 'Y' AND birthplace_region_or_country IS NULL)
    OR (born_in_town_of_census = 'N' AND birthplace_region_or_country IS NOT NULL)
    OR born_in_town_of_census IS NULL
  )
);

--------------------------------------------------------------------------------
-- 6) PERSON MODULES
--------------------------------------------------------------------------------
CREATE TABLE person_economic_activity (
  person_id             NUMBER PRIMARY KEY,
  worked_last_7days     CHAR(1) CHECK (worked_last_7days IN ('Y','N')),
  engagement_status     VARCHAR2(32),  -- null if worked_last_7days = 'Y'
  reason_not_seeking    VARCHAR2(32),
  occupation_code       VARCHAR2(16),
  occupation_text       VARCHAR2(200),
  establishment_name    VARCHAR2(200),
  establishment_location VARCHAR2(200),
  industry_code         VARCHAR2(16),
  employment_status     VARCHAR2(16),
  employment_sector     VARCHAR2(16),
  CONSTRAINT fk_pea_person FOREIGN KEY (person_id)
    REFERENCES person(person_id) ON DELETE CASCADE,
  CONSTRAINT ck_pea_presence CHECK (
    worked_last_7days = 'Y' AND engagement_status IS NULL OR worked_last_7days = 'N'
  )
);

CREATE TABLE person_disability (
  person_id       NUMBER NOT NULL,
  disability_type VARCHAR2(16) NOT NULL,
  has_condition   CHAR(1) CHECK (has_condition IN ('Y','N')) NOT NULL,
  CONSTRAINT pk_person_disability PRIMARY KEY (person_id, disability_type),
  CONSTRAINT fk_disability_person FOREIGN KEY (person_id)
    REFERENCES person(person_id) ON DELETE CASCADE
);

CREATE TABLE person_ict (
  person_id        NUMBER PRIMARY KEY,
  owns_mobile_phone CHAR(1) CHECK (owns_mobile_phone IN ('Y','N')),
  used_internet     CHAR(1) CHECK (used_internet IN ('Y','N')),
  CONSTRAINT fk_pict_person FOREIGN KEY (person_id)
    REFERENCES person(person_id) ON DELETE CASCADE
);

CREATE TABLE person_fertility (
  person_id                NUMBER PRIMARY KEY,
  live_birth_male          NUMBER CHECK (live_birth_male          IS NULL OR live_birth_male          >= 0),
  live_birth_female        NUMBER CHECK (live_birth_female        IS NULL OR live_birth_female        >= 0),
  living_male              NUMBER CHECK (living_male              IS NULL OR living_male              >= 0),
  living_female            NUMBER CHECK (living_female            IS NULL OR living_female            >= 0),
  live_births_last12m_boys NUMBER CHECK (live_births_last12m_boys IS NULL OR live_births_last12m_boys >= 0),
  live_births_last12m_girls NUMBER CHECK(live_births_last12m_girls IS NULL OR live_births_last12m_girls >= 0),
  CONSTRAINT fk_pf_person FOREIGN KEY (person_id)
    REFERENCES person(person_id) ON DELETE CASCADE
);

--------------------------------------------------------------------------------
-- 7) HOUSEHOLD MODULES
--------------------------------------------------------------------------------
CREATE TABLE household_mortality (
  ea_code         VARCHAR2(24) NOT NULL,
  structure_no    VARCHAR2(24) NOT NULL,
  household_no    VARCHAR2(24) NOT NULL,
  death_no        NUMBER NOT NULL,
  full_name       VARCHAR2(200),
  sex             VARCHAR2(8),
  age_at_death    NUMBER CHECK (age_at_death BETWEEN 0 AND 120),
  death_date      DATE,
  cause_code      VARCHAR2(16),
  maternal_death  CHAR(1) CHECK (maternal_death IN ('Y','N')),
  linked_person_id NUMBER,
  CONSTRAINT pk_household_mortality PRIMARY KEY (ea_code, structure_no, household_no, death_no),
  CONSTRAINT fk_mortality_household FOREIGN KEY (ea_code, structure_no, household_no)
    REFERENCES household(ea_code, structure_no, household_no),
  CONSTRAINT fk_mortality_person FOREIGN KEY (linked_person_id)
    REFERENCES person(person_id)
);

CREATE TABLE household_ict (
  ea_code        VARCHAR2(24) NOT NULL,
  structure_no   VARCHAR2(24) NOT NULL,
  household_no   VARCHAR2(24) NOT NULL,
  has_fixed_line CHAR(1) CHECK (has_fixed_line IN ('Y','N')),
  has_computer   CHAR(1) CHECK (has_computer   IN ('Y','N')),
  recorded_at    TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  CONSTRAINT pk_household_ict PRIMARY KEY (ea_code, structure_no, household_no),
  CONSTRAINT fk_ict_household FOREIGN KEY (ea_code, structure_no, household_no)
    REFERENCES household(ea_code, structure_no, household_no)
);

CREATE TABLE household_crop (
  ea_code        VARCHAR2(24) NOT NULL,
  structure_no   VARCHAR2(24) NOT NULL,
  household_no   VARCHAR2(24) NOT NULL,
  crop_id        VARCHAR2(16) NOT NULL,
  plot_size      NUMBER(12,3),
  size_unit      VARCHAR2(16),
  cropping_type  VARCHAR2(16),
  CONSTRAINT pk_household_crop PRIMARY KEY (ea_code, structure_no, household_no, crop_id),
  CONSTRAINT fk_crop_household FOREIGN KEY (ea_code, structure_no, household_no)
    REFERENCES household(ea_code, structure_no, household_no)
);

CREATE TABLE household_livestock (
  ea_code        VARCHAR2(24) NOT NULL,
  structure_no   VARCHAR2(24) NOT NULL,
  household_no   VARCHAR2(24) NOT NULL,
  species_id     VARCHAR2(16) NOT NULL,
  quantity       NUMBER NOT NULL CHECK (quantity >= 0),
  CONSTRAINT pk_household_livestock PRIMARY KEY (ea_code, structure_no, household_no, species_id),
  CONSTRAINT fk_livestock_household FOREIGN KEY (ea_code, structure_no, household_no)
    REFERENCES household(ea_code, structure_no, household_no)
);

--------------------------------------------------------------------------------
-- 8) INDEXING & PERFORMANCE
--------------------------------------------------------------------------------
CREATE INDEX idx_household_geo       ON household(locality_code, ea_code);
CREATE INDEX idx_person_household    ON person(ea_code, structure_no, household_no);
CREATE INDEX idx_roster_household    ON household_roster(ea_code, structure_no, household_no);
CREATE INDEX idx_emigration_household ON household_emigration(ea_code, structure_no, household_no);
CREATE INDEX idx_crop_household      ON household_crop(ea_code, structure_no, household_no);
CREATE INDEX idx_livestock_household ON household_livestock(ea_code, structure_no, household_no);

--------------------------------------------------------------------------------
-- 9) DATA QUALITY VIEWS (OPTIONAL)
--------------------------------------------------------------------------------
CREATE OR REPLACE VIEW v_qc_fertility_invalid AS
SELECT pf.person_id, p.sex, p.age_years
FROM person_fertility pf
JOIN person p ON p.person_id = pf.person_id
WHERE NOT (
  (UPPER(p.sex) LIKE 'F%') AND p.age_years BETWEEN 12 AND 54
);

CREATE OR REPLACE VIEW v_qc_roster_without_person AS
SELECT r.*
FROM household_roster r
LEFT JOIN person p
  ON p.ea_code = r.ea_code
 AND p.structure_no = r.structure_no
 AND p.household_no = r.household_no
 AND p.line_no = r.line_no
WHERE p.person_id IS NULL;

--------------------------------------------------------------------------------
-- 10) TRIGGERS FOR CROSS-TABLE / DYNAMIC CHECKS
--------------------------------------------------------------------------------
-- Age ≥ 5 for economic activity
CREATE OR REPLACE TRIGGER trg_pea_age5
  BEFORE INSERT OR UPDATE ON person_economic_activity
  FOR EACH ROW
DECLARE v_age NUMBER;
BEGIN
  SELECT age_years INTO v_age FROM person WHERE person_id = :NEW.person_id;
  IF v_age < 5 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Economic activity requires age >= 5');
  END IF;
END;
/

-- Age ≥ 12 for ICT
CREATE OR REPLACE TRIGGER trg_pict_age12
  BEFORE INSERT OR UPDATE ON person_ict
  FOR EACH ROW
DECLARE v_age NUMBER;
BEGIN
  SELECT age_years INTO v_age FROM person WHERE person_id = :NEW.person_id;
  IF v_age < 12 THEN
    RAISE_APPLICATION_ERROR(-20002, 'ICT module requires age >= 12');
  END IF;
END;
/

-- Female and 12–54 for fertility
CREATE OR REPLACE TRIGGER trg_pf_female_12_54
  BEFORE INSERT OR UPDATE ON person_fertility
  FOR EACH ROW
DECLARE v_age NUMBER; v_sex VARCHAR2(8);
BEGIN
  SELECT age_years, sex INTO v_age, v_sex FROM person WHERE person_id = :NEW.person_id;
  IF NOT (v_age BETWEEN 12 AND 54 AND (UPPER(v_sex) LIKE 'F%')) THEN
    RAISE_APPLICATION_ERROR(-20003, 'Fertility module limited to females aged 12–54');
  END IF;
END;
/

-- Year of departure must be reasonable (<= current year and >= 1900)
CREATE OR REPLACE TRIGGER trg_emig_year_check
  BEFORE INSERT OR UPDATE ON household_emigration
  FOR EACH ROW
BEGIN
  IF :NEW.year_of_departure IS NOT NULL THEN
    IF :NEW.year_of_departure < 1900 OR :NEW.year_of_departure > EXTRACT(YEAR FROM SYSDATE) THEN
      RAISE_APPLICATION_ERROR(-20004, 'year_of_departure must be between 1900 and current year');
    END IF;
  END IF;
END;
/

-- Optional: enforce worked_last_7days/engagement_status coherence more strictly
CREATE OR REPLACE TRIGGER trg_pea_logic
  BEFORE INSERT OR UPDATE ON person_economic_activity
  FOR EACH ROW
BEGIN
  IF :NEW.worked_last_7days = 'Y' AND :NEW.engagement_status IS NOT NULL THEN
    RAISE_APPLICATION_ERROR(-20005, 'engagement_status must be NULL when worked_last_7days = ''Y''');
  END IF;
END;
/

-- End of Oracle DDL

-- Oracle backend objects for Census DB
-- Requires tables from "Census Db Schema Oracle" to already exist in the schema
-- Target: Oracle 19c+

--------------------------------------------------------------------------------
-- 1) LOG TABLE
--------------------------------------------------------------------------------
CREATE TABLE activity_log (
  log_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  table_name     VARCHAR2(64) NOT NULL,
  action         VARCHAR2(16) NOT NULL,
  key_value      VARCHAR2(128),
  username_      VARCHAR2(128) DEFAULT SYS_CONTEXT('USERENV','SESSION_USER') NOT NULL,
  log_time       TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
  details        CLOB
);

--------------------------------------------------------------------------------
-- 2) STORED PROCEDURES (INSERT / UPDATE / DELETE) + CURSOR (RETRIEVE)
--------------------------------------------------------------------------------
-- Insert PERSON and return new PERSON_ID
CREATE OR REPLACE PROCEDURE insert_person (
  p_ea_code          IN  VARCHAR2,
  p_structure_no     IN  VARCHAR2,
  p_household_no     IN  VARCHAR2,
  p_line_no          IN  NUMBER,
  p_full_name        IN  VARCHAR2,
  p_sex              IN  VARCHAR2,
  p_date_of_birth    IN  DATE,
  p_age_years        IN  NUMBER,
  p_nationality      IN  VARCHAR2,
  p_ethnicity        IN  VARCHAR2,
  p_religion         IN  VARCHAR2,
  p_marital_status   IN  VARCHAR2,
  p_person_id        OUT NUMBER
) AS
BEGIN
  INSERT INTO person (
    ea_code, structure_no, household_no, line_no, full_name, sex,
    date_of_birth, age_years, nationality, ethnicity, religion, marital_status
  ) VALUES (
    p_ea_code, p_structure_no, p_household_no, p_line_no, p_full_name, p_sex,
    p_date_of_birth, p_age_years, p_nationality, p_ethnicity, p_religion, p_marital_status
  ) RETURNING person_id INTO p_person_id;
END;
/

-- Update PERSON by PERSON_ID
CREATE OR REPLACE PROCEDURE update_person (
  p_person_id        IN  NUMBER,
  p_full_name        IN  VARCHAR2,
  p_sex              IN  VARCHAR2,
  p_date_of_birth    IN  DATE,
  p_age_years        IN  NUMBER,
  p_nationality      IN  VARCHAR2,
  p_ethnicity        IN  VARCHAR2,
  p_religion         IN  VARCHAR2,
  p_marital_status   IN  VARCHAR2
) AS
BEGIN
  UPDATE person
     SET full_name      = p_full_name,
         sex            = p_sex,
         date_of_birth  = p_date_of_birth,
         age_years      = p_age_years,
         nationality    = p_nationality,
         ethnicity      = p_ethnicity,
         religion       = p_religion,
         marital_status = p_marital_status
   WHERE person_id = p_person_id;
END;
/

-- Delete PERSON by PERSON_ID
CREATE OR REPLACE PROCEDURE delete_person (
  p_person_id IN NUMBER
) AS
BEGIN
  DELETE FROM person WHERE person_id = p_person_id;
END;
/

-- Retrieve a person (with JOINs) via SYS_REFCURSOR
-- Joins PERSON -> HOUSEHOLD -> LOCALITY -> SUBDISTRICT -> DISTRICT -> REGION
CREATE OR REPLACE PROCEDURE get_person_by_id (
  p_person_id IN NUMBER,
  o_cur       OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN o_cur FOR
    SELECT p.person_id,
           p.full_name,
           p.sex,
           p.age_years,
           p.date_of_birth,
           h.household_no,
           h.structure_no,
           h.ea_code,
           l.locality_code,
           l.locality_name,
           sd.subdistrict_code,
           sd.subdistrict_name,
           d.district_code,
           d.district_name,
           r.region_code,
           r.region_name
      FROM person p
      JOIN household h
        ON h.ea_code = p.ea_code
       AND h.structure_no = p.structure_no
       AND h.household_no = p.household_no
      JOIN structure s
        ON s.ea_code = h.ea_code AND s.structure_no = h.structure_no
      JOIN locality l
        ON l.locality_code = h.locality_code
      JOIN subdistrict sd
        ON sd.subdistrict_code = l.subdistrict_code
      JOIN district d
        ON d.district_code = sd.district_code
      JOIN region r
        ON r.region_code = d.region_code
     WHERE p.person_id = p_person_id;
END;
/

-- Search by locality (demonstrates JOIN + multiple rows via cursor)
CREATE OR REPLACE PROCEDURE search_persons_by_locality (
  p_locality_code IN VARCHAR2,
  o_cur           OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN o_cur FOR
    SELECT p.person_id, p.full_name, p.sex, p.age_years,
           h.household_no, h.structure_no,
           l.locality_code, l.locality_name
      FROM person p
      JOIN household h
        ON h.ea_code = p.ea_code
       AND h.structure_no = p.structure_no
       AND h.household_no = p.household_no
      JOIN locality l
        ON l.locality_code = h.locality_code
     WHERE l.locality_code = p_locality_code
     ORDER BY p.full_name;
END;
/

--------------------------------------------------------------------------------
-- 3) TRIGGERS TO LOG USER ACTIVITIES
--------------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER trg_person_activity
AFTER INSERT OR UPDATE OR DELETE ON person
FOR EACH ROW
DECLARE
  v_action VARCHAR2(16);
  v_details CLOB;
BEGIN
  IF INSERTING THEN
    v_action := 'INSERT';
    v_details := 'Inserted person: ' || :NEW.full_name || ', sex=' || :NEW.sex || ', age=' || :NEW.age_years;
    INSERT INTO activity_log (table_name, action, key_value, details)
    VALUES ('PERSON', v_action, TO_CHAR(:NEW.person_id), v_details);
  ELSIF UPDATING THEN
    v_action := 'UPDATE';
    v_details := 'Updated person_id=' || TO_CHAR(:OLD.person_id) ||
                 ' old_name=' || :OLD.full_name || ' new_name=' || :NEW.full_name;
    INSERT INTO activity_log (table_name, action, key_value, details)
    VALUES ('PERSON', v_action, TO_CHAR(:OLD.person_id), v_details);
  ELSIF DELETING THEN
    v_action := 'DELETE';
    v_details := 'Deleted person: ' || :OLD.full_name;
    INSERT INTO activity_log (table_name, action, key_value, details)
    VALUES ('PERSON', v_action, TO_CHAR(:OLD.person_id), v_details);
  END IF;
END;
/

-- Optional: similar trigger for HOUSEHOLD
CREATE OR REPLACE TRIGGER trg_household_activity
AFTER INSERT OR UPDATE OR DELETE ON household
FOR EACH ROW
DECLARE
  v_action VARCHAR2(16);
  v_details CLOB;
  v_key VARCHAR2(128);
BEGIN
  IF INSERTING THEN
    v_action := 'INSERT'; v_key := :NEW.ea_code||'/'||:NEW.structure_no||'/'||:NEW.household_no;
    v_details := 'Inserted household';
    INSERT INTO activity_log (table_name, action, key_value, details)
    VALUES ('HOUSEHOLD', v_action, v_key, v_details);
  ELSIF UPDATING THEN
    v_action := 'UPDATE'; v_key := :OLD.ea_code||'/'||:OLD.structure_no||'/'||:OLD.household_no;
    v_details := 'Updated household';
    INSERT INTO activity_log (table_name, action, key_value, details)
    VALUES ('HOUSEHOLD', v_action, v_key, v_details);
  ELSIF DELETING THEN
    v_action := 'DELETE'; v_key := :OLD.ea_code||'/'||:OLD.structure_no||'/'||:OLD.household_no;
    v_details := 'Deleted household';
    INSERT INTO activity_log (table_name, action, key_value, details)
    VALUES ('HOUSEHOLD', v_action, v_key, v_details);
  END IF;
END;
/

-- End of backend objects

